ProxySubscribe
-----------------------
From a client handler node. Subscribes to a queue and send the subscription events back to the
client handler

Parameters:
	SubscriptionID
		- UUID identifier for this subscription

	QueueID
		- User supplied identifier for the queue

	DownloadType = None, ClaimStoredMessages, PeekStoredMessages
		- None 
			Do not download stored messages. Only subscribe to new messages coming in on the queue

		- ClaimStoredMessages
			Claim messages that are currently in persistent storage in the given queue
			Claiming removes the messages and resets the queue's last claimed pointer

		- PeekStoredMessages
			Peek at messages that are currently in persistent storage in the given queue
			Peeking does not remove the messages

	MaxLookbackDays
		- The number of days we will look back into the queue for stored messages.
			Setting this number too high can lead to performance problems
			
Returns ProxySubscribeResponse:
	OK,
	NotAuth,
	NotHere
		- This node does not handle the requested range. Client handler should recheck the ring and retry



ProxyUnsubscribe
-----------------------
From a coordinator node. Unsubscribes from a queue

Parameters:
	SubscriptionID
		- UUID identifier for this subscription

Returns ProxyUnsubscribeResponse:
	OK,
	NotAuth,



ProxyPost
------------------------
From a coordinator node. Posts a new message to a queue on behalf of a client

Parameters:
	Message (PostMessage)
		- A copy of the message from the client
		
Returns ProxyPostResponse (see below)
	


ProxyPostResponse
----------------------
A return response to a proxy post

Parameters:
	Status
		NotAuth,
		NotHere,
			- This node does not handle this range
		Queued
		
	VectorClock
		- The clock for this message as assigned by the node



StampMessage
-----------------------
Coordinator node returning the resulting vector clock from a quorum of nodes and
requesting that this node stamp the message with the clock

Parameters:
	VectorClock
		- The clock for the message



PipedNotification
------------------------
Notifies a coordinator node that a message was successfully piped (consumed)

Parameters:
	MessageId
		- UUID of the message that was piped



RingUpdate
-----------------------
From a new node, or a node forwarding a message from another about a change of state

Parameters:
	UpdateType = Heartbeat, Decommission
		- The type of update this is

	ContactURI
		- The URI to contact the node at

	RangeStart
		- The range that this node handles


Returns:
	OK,
	NotAuth


GetRing
------------------------
Returns data about the nodes in the ring including contact information and ranges

Parameters:
	None

Return:
 	Nodes
	{
		Node
		{
			LastHeartbeat = "[time]",
			ContactURI = "[URI]",
			RangeStart = "[range]"
		},
		
	}

	OR NotAuth



